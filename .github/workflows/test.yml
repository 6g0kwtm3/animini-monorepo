name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [mobile-chrome, mobile-webkit]

    name: Test E2E

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 21.6.2
          cache: "pnpm"

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $env:GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install dependencies ðŸ“¦
        run: pnpm i --frozen-lockfile

      - name: Install Playwright
        run: pnpm exec playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Await CF Pages
        uses: WalshyDev/cf-pages-await@v1
        id: cf-pages
        with:
          accountEmail: ${{ secrets.CF_ACCOUNT_EMAIL  }}
          apiToken: ${{ secrets.CF_API_TOKEN  }}
          accountId: 'e9b0348e83d33e46fbb82c3271317d70'
          project: 'animini-pwa'

      - name: Test E2E
        run: pnpm run test --project=${{ matrix.project }}
        if: 
        env:
          ANILIST_TEST_TOKEN: ${{ secrets.ANILIST_TEST_TOKEN }}
          BASE_URL: ${{ steps.cf-pages.outputs.url }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-playwright-report
          path: playwright-report
          retention-days: 30

  typecheck:
    runs-on: ubuntu-latest

    name: Typecheck
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 21.6.2
          cache: "pnpm"

      - name: Install dependencies ðŸ“¦
        run: pnpm i --frozen-lockfile

      - run: pnpm run paraglide

      - name: Typecheck
        run: pnpm run check

  format:
    runs-on: ubuntu-latest
    name: Lint & Format
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 21.6.2
          cache: "pnpm"

      - name: Install dependencies ðŸ“¦
        run: pnpm i --frozen-lockfile

      - name: Lint
        run: pnpm run lint --fix

      - name: Format
        run: pnpm run format

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "refactor: run format"
